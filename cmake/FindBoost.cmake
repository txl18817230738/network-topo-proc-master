# Copyright (c) 2023 vesoft inc. All rights reserved.

find_library(BoostRegex_LIB NAMES libboost_regex.so DOC "Boost regex library")
find_library(BoostSystem_LIB NAMES libboost_system.so DOC "Boost system library")
find_library(BoostAtomic_LIB NAMES libboost_atomic.so DOC "Boost atomic library")
find_library(BoostThread_LIB NAMES libboost_thread.so DOC "Boost thread library")
find_library(BoostContext_LIB NAMES libboost_context.so DOC "Boost context library")
find_library(BoostFilesystem_LIB NAMES libboost_filesystem.so DOC "Boost filesystem library")
find_library(BoostProgramOptions_LIB NAMES libboost_program_options.so DOC "Boost program options library")
find_library(BoostIOStreams_LIB NAMES libboost_iostreams.so DOC "Boost iostreams library")
find_library(BoostDateTime_LIB NAMES libboost_date_time.so DOC "Boost date time library")
if(NOT BoostRegex_LIB)
        message(FATAL_ERROR "libboost_regex not found")
endif()
if(NOT BoostSystem_LIB)
        message(FATAL_ERROR "libboost_system not found")
endif()
if(NOT BoostAtomic_LIB)
        message(FATAL_ERROR "libboost_atomic not found")
endif()
if(NOT BoostThread_LIB)
        message(FATAL_ERROR "libboost_thread not found")
endif()
if(NOT BoostContext_LIB)
        message(FATAL_ERROR "libboost_context not found")
endif()
if(NOT BoostFilesystem_LIB)
        message(FATAL_ERROR "libboost_filesystem not found")
endif()
if(NOT BoostProgramOptions_LIB)
        message(FATAL_ERROR "libboost_program_options not found")
endif()
if(NOT BoostIOStreams_LIB)
        message(FATAL_ERROR "libboost_iostreams not found")
endif()
if(NOT BoostDateTime_LIB)
        message(FATAL_ERROR "libboost_date_time not found")
endif()

add_library(Boost::regex SHARED IMPORTED GLOBAL)
add_library(Boost::system SHARED IMPORTED GLOBAL)
add_library(Boost::atomic SHARED IMPORTED GLOBAL)
add_library(Boost::thread SHARED IMPORTED GLOBAL)
add_library(Boost::context SHARED IMPORTED GLOBAL)
add_library(Boost::filesystem SHARED IMPORTED GLOBAL)
add_library(Boost::program_options SHARED IMPORTED GLOBAL)
add_library(Boost::iostreams SHARED IMPORTED GLOBAL)
add_library(Boost::date_time SHARED IMPORTED GLOBAL)

nebula_setup_imported_library(NAME Boost::regex PATH ${BoostRegex_LIB} LIBRARIES pthread)
nebula_setup_imported_library(NAME Boost::system PATH ${BoostSystem_LIB} LIBRARIES pthread)
nebula_setup_imported_library(NAME Boost::atomic PATH ${BoostAtomic_LIB} LIBRARIES pthread)
nebula_setup_imported_library(NAME Boost::thread PATH ${BoostThread_LIB} LIBRARIES pthread)
nebula_setup_imported_library(NAME Boost::context PATH ${BoostContext_LIB} LIBRARIES pthread)
nebula_setup_imported_library(NAME Boost::filesystem PATH ${BoostFilesystem_LIB} LIBRARIES pthread)
nebula_setup_imported_library(NAME Boost::program_options PATH ${BoostProgramOptions_LIB} LIBRARIES pthread)
nebula_setup_imported_library(NAME Boost::date_time PATH ${BoostDateTime_LIB} LIBRARIES pthread)
nebula_setup_imported_library(
    NAME Boost::iostreams
    PATH ${BoostIOStreams_LIB}
    LIBRARIES Zlib LZMA BZ2 pthread
)
