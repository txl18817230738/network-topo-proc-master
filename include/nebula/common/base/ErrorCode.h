// Copyright (c) 2023 vesoft inc. All rights reserved.

#pragma once

#include <cstdint>
#include <limits>
#include <sstream>

#include <fmt/format.h>

#include "nebula/common/base/ErrorMessage.h"

#ifdef NO_DATA
#undef NO_DATA
#endif
#include "nebula/common/base/Logging.h"

namespace nebula {

/**
 * An error code is encoded in an eight byte uint64.
 *
 * │◀────────────────────────────   8 bytes  ────────────────────────────▶│
 * ├───────┐┌───────┐┌───────┐┌───────┐┌───────┐┌───────┐┌───────┐┌───────┤
 * │       ││       ││       ││       ││       ││       ││       ││       │
 * └───────┘└───────┘└───────┘└───────┘└───────┘└───────┘└───────┘└───────┘
 * │    CLASS        │        SUBCLASS          │         PADDING         │
 *
 *  CLASS   : 2 bytes for GQLStatus's class
 *  SUBCLASS: 3 bytes for GQLStatus's subclass
 *  PADDING : 3 bytes padding (may reserved for future extension);
 */

enum class ErrorClass : uint32_t;
enum class ErrorCode : uint64_t;

enum class ErrorCategory : uint8_t {
    S = 'S',  // successful completion
    W = 'W',  // successful completion but with a warning
    N = 'N',  // no-data
    I = 'I',  // additional information returned in the nested GQL-status objects
    X = 'X',  // exception
    T = 'T',  // internal error
    U = 'U',  // unknown
};

#define CODE_CLASS_BYTES 2
#define CODE_BYTES 5

#define CLASS(C) ((static_cast<uint32_t>((C)[1]) << 8) | static_cast<uint32_t>((C)[0]))

#define SUBCLASS(SCODE)                                                                     \
    ((static_cast<uint32_t>((SCODE)[2]) << 16) | (static_cast<uint32_t>((SCODE)[1]) << 8) | \
     static_cast<uint32_t>((SCODE)[0]))

#define CODE(CLASS, SUB_CLASS) \
    ((static_cast<uint64_t>(SUB_CLASS) << 16) | static_cast<uint64_t>(CLASS))

constexpr const char* SUCCESS = "00000";

// clang-format off

/*
 * \brief
 * GQLStatus comprises a condition code and additional diagnostic information. Every GQL-program
 * returns some diagnostic information to the GQL-client that originated the GQL-request of
 * which the GQL-program was a part.
 *
 * \details
 * It defined [class, subclass] codes for each condition happens when running the
 * GQL-Request. GQL spec classifies 0-9, A-Z characters into standard-defined code and
 * implementation-defined code.
 *
 * Standard-defined class
 * codes:'0','1','2','3','4','A','B','C','D','E','F','G','H'
 *
 * Implementation-defined
 * codes:'5','6','7','8','9','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'
 *
 * For standard-defined class code, we follow the specification defined in `23.1 GQLSTATUS`;
 * Additionally, we further define some additional code for our own implementation-defined
 * codes.
 */
enum class ErrorClass : uint32_t {
    /* Standard */
    SUCCESSFUL_COMPLETION                   = CLASS("00"),
    WARNING                                 = CLASS("01"),
    NO_DATA                                 = CLASS("02"),
    INFORMATIONAL                           = CLASS("03"),
    CONNECTION_EXCEPTION                    = CLASS("08"),
    DATA_EXCEPTION                          = CLASS("22"),
    INVALID_TRANSACTION_STATE               = CLASS("25"),
    INVALID_TRANSACTION_TERMINATION         = CLASS("2D"),
    TRANSACTION_ROLLBACK                    = CLASS("40"),
    SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION   = CLASS("42"),
    DEPENDENT_OBJECT_ERROR                  = CLASS("G1"),
    GRAPH_TYPE_VIOLATION                    = CLASS("G2"),

    /* Extended */
    /* exceptions */
    RUNTIME_ERROR                           = CLASS("NR"),
    SEMANTIC_ERROR                          = CLASS("NS"),
    STORAGE_ERROR                           = CLASS("NO"),
    CATALOG_ERROR                           = CLASS("NC"),
    DATA_READ_WRITE_ERROR                   = CLASS("ND"),
    INVALID_PARAMETER                       = CLASS("NI"),
    GRAPH_COMPUTE_ERROR                     = CLASS("NG"),
    PLUGIN_ERROR                            = CLASS("NP"),
    SESSION_ERROR                           = CLASS("NE"),
    OPTIMIZER_ERROR                         = CLASS("NZ"),
    AUTHENTICATE_ERROR                      = CLASS("NH"),
    AUTHORIZE_ERROR                         = CLASS("NB"),
    UNSUPPORTED                             = CLASS("NT"),
    BACKUP_ERROR                            = CLASS("NF"),
    /* internal errors */
    METADATA_ERROR                          = CLASS("NM"),
    RPC_ERROR                               = CLASS("NN"),
    KVSTORE_ERROR                           = CLASS("NK"),
    RAFT_ERROR                              = CLASS("NA"),
    SYSTEM_ERROR                            = CLASS("NY"),
    JOB_ERROR                               = CLASS("NJ"),
    LICENSE_ERROR                           = CLASS("NL"),
    UNKNOWN                                 = CLASS("NU"),
    /* client errors, do not use in server side */
    CLIENT_ERROR                            = CLASS("99"),
};

#define DEFINE_ERRORCODE(C, SCODE, SC) \
    SC = CODE(ErrorClass::C, SUBCLASS(SCODE))

enum class ErrorCode : uint64_t {
    // S - successful completion
    DEFINE_ERRORCODE(SUCCESSFUL_COMPLETION, "000", SUCCESSFUL_COMPLETION),
    DEFINE_ERRORCODE(SUCCESSFUL_COMPLETION, "001", OMITTED_RESULT),

    // W - warning
    DEFINE_ERRORCODE(WARNING, "000", WARNING),
    DEFINE_ERRORCODE(WARNING, "004", WARNING_STRING_DATA_RIGHT_TRUNCATION),
    DEFINE_ERRORCODE(WARNING, "G03", CATALOG_GRAPH_NOT_FOUND),
    DEFINE_ERRORCODE(WARNING, "G04", CATALOG_GRAPH_TYPE_NOT_FOUND),
    DEFINE_ERRORCODE(WARNING, "G11", NULL_VALUE_ELIMINATED_IN_SET_FUNCTION),

    // N - no data
    DEFINE_ERRORCODE(NO_DATA, "000", NO_DATA),

    // I - informational
    DEFINE_ERRORCODE(INFORMATIONAL, "000", INFORMATIONAL),

    // X - connection exception
    DEFINE_ERRORCODE(CONNECTION_EXCEPTION, "000", CONNECTION_EXCEPTION),
    DEFINE_ERRORCODE(CONNECTION_EXCEPTION, "007", TRANSACTION_RESOLUTION_UNKNOWN),

    // X - data exception
    DEFINE_ERRORCODE(DATA_EXCEPTION, "000", DATA_EXCEPTION),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "001", DATA_STRING_DATA_RIGHT_TRUNCATION),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "003", NUMERIC_VALUE_OUT_OF_RANGE),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "004", NULL_VALUE_NOT_ALLOWED),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "007", INVALID_DATE_TIME_OR_DATETIME_FORMAT),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "008", DATETIME_FIELD_OVERFLOW),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "009", PARSE_TEMPORAL_FAIL),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "011", SUBSTRING_ERROR),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "012", DIVISION_BY_ZERO),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "015", INTERVAL_FIELD_OVERFLOW),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "018", INVALID_CHARACTER_VALUE_FOR_CAST),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "01E", INVALID_ARGUMENT_FOR_NATURAL_LOGARITHM),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "01F", INVALID_ARGUMENT_FOR_POWER_FUNCTION),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "027", TRIM_ERROR),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "02F", ARRAY_DATA_RIGHT_TRUNCATION),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G02", NEGATIVE_LIMIT_VALUE),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G03", INVALID_VALUE_TYPE),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G04", VALUES_NOT_COMPARABLE),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G05", INVALID_DATE_TIME_OR_DATETIME_FUNCTION_FIELD_NAME),                                     // NOLINT
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G06", INVALID_DATETIME_FUNCTION_VALUE),                                                       // NOLINT
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G07", INVALID_DURATION_FUNCTION_FIELD_NAME),                                                  // NOLINT
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G0B", LIST_DATA_RIGHT_TRUNCATION),                                                            // NOLINT
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G0C", LIST_ELEMENT_ERROR),                                                                    // NOLINT
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G0F", INVALID_NUMBER_OF_PATHS_OR_GROUPS),                                                     // NOLINT
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G0H", INVALID_DURATION_FORMAT),                                                               // NOLINT
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G0M", MULTIPLE_ASSIGNMENTS_TO_A_GRAPH_ELEMENT_PROPERTY),                                      // NOLINT
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G0N", DATA_NUMBER_OF_NODE_LABELS_BELOW_SUPPORTED_MINIMUM),                                    // NOLINT
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G0P", DATA_NUMBER_OF_NODE_LABELS_EXCEEDS_SUPPORTED_MAXIMUM),                                  // NOLINT
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G0Q", DATA_NUMBER_OF_EDGE_LABELS_BELOW_SUPPORTED_MINIMUM),                                    // NOLINT
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G0R", DATA_NUMBER_OF_EDGE_LABELS_EXCEEDS_SUPPORTED_MAXIMUM),                                  // NOLINT
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G0S", DATA_NUMBER_OF_NODE_PROPERTIES_EXCEEDS_SUPPORTED_MAXIMUM),                              // NOLINT
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G0T", DATA_NUMBER_OF_EDGE_PROPERTIES_EXCEEDS_SUPPORTED_MAXIMUM),                              // NOLINT
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G0U", RECORD_FIELDS_DO_NOT_MATCH),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G0V", REFERENCE_VALUE_INVALID_BASE_TYPE),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G0W", REFERENCE_VALUE_INVALID_CONSTRAINED_TYPE),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G0X", RECORD_DATA_FIELD_UNASSIGNABLE),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G0Y", RECORD_DATA_FIELD_MISSING),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G0Z", MALFORMED_PATH),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G10", PATH_DATE_RIGHT_TRUNCATION),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G11", REFERENCE_VALUE_REFERENT_DELETED),
    // FIXME (codesigner) GQL Spec(23.1) defined both X22003 & X22G12 as `invalid value type`,
    // it is a mistake in spec
    // DEFINE_ERRORCODE(DATA_EXCEPTION, INVALID_VALUE_TYPE, 'G', '1', '2'),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G13", INVALID_GROUP_VARIABLE_VALUE),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G14", INCOMPATIBLE_TEMPORAL_INSTANT_UNIT_GROUPS),

    DEFINE_ERRORCODE(DATA_EXCEPTION, "G15", INVALID_CAST),
    DEFINE_ERRORCODE(DATA_EXCEPTION, "G16", TRIM_LIST_OUT_OF_RANGE),

    // X - invalid transaction state
    DEFINE_ERRORCODE(INVALID_TRANSACTION_STATE, "000", INVALID_TRANSACTION_STATE),
    DEFINE_ERRORCODE(INVALID_TRANSACTION_STATE, "G01", ACTIVE_GQL_TRANSACTION),
    DEFINE_ERRORCODE(INVALID_TRANSACTION_STATE, "G02", CATALOG_AND_DATA_STATEMENT_MIXING_NOT_SUPPORTED),                            // NOLINT
    DEFINE_ERRORCODE(INVALID_TRANSACTION_STATE, "G03", READ_ONLY_GQL_TRANSACTION),                                                  // NOLINT
    DEFINE_ERRORCODE(INVALID_TRANSACTION_STATE, "G04", ACCESSING_MULTIPLE_GRAPHS_NOT_SUPPORTED),                                    // NOLINT

    // X - invalid transaction termination
    DEFINE_ERRORCODE(INVALID_TRANSACTION_TERMINATION, "000", INVALID_TRANSACTION_TERMINATION),                                      // NOLINT

    // X - transaction rollback
    DEFINE_ERRORCODE(TRANSACTION_ROLLBACK, "000", TRANSACTION_ROLLBACK),
    DEFINE_ERRORCODE(TRANSACTION_ROLLBACK, "003", STATEMENT_COMPLETION_UNKNOWN),

    // X - syntax error or access rule violation
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "000", SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION),                          // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "001", INVALID_SYNTAX),                                                 // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "002", INVALID_REFERENCE),                                              // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "004", USE_OF_VISUALLY_CONFUSABLE_IDENTIFIERS),                         // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "006", SYNTAX_NUMBER_OF_EDGE_LABELS_BELOW_SUPPORTED_MINIMUM),           // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "007", SYNTAX_NUMBER_OF_EDGE_LABELS_EXCEEDS_SUPPORTED_MAXIMUM),         // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "008", SYNTAX_NUMBER_OF_EDGE_PROPERTIES_EXCEEDS_SUPPORTED_MAXIMUM),     // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "009", SYNTAX_NUMBER_OF_NODE_LABELS_BELOW_SUPPORTED_MINIMUM),           // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "010", SYNTAX_NUMBER_OF_NODE_LABELS_EXCEEDS_SUPPORTED_MAXIMUM),         // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "011", SYNTAX_NUMBER_OF_NODE_PROPERTIES_EXCEEDS_SUPPORTED_MAXIMUM),     // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "012", NUMBER_OF_NODE_TYPE_KEY_LABELS_BELOW_SUPPORTED_MINIMUM),         // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "013", NUMBER_OF_NODE_TYPE_KEY_LABELS_EXCEEDS_SUPPORTED_MAXIMUM),       // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "014", NUMBER_OF_EDGE_TYPE_KEY_LABELS_BELOW_SUPPORTED_MINIMUM),         // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "015", NUMBER_OF_EDGE_TYPE_KEY_LABELS_EXCEEDS_SUPPORTED_MAXIMUM),       // NOLINT

    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N01", EMPTY_STATEMENT),                                                // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N02", INVALID_SYNTAX_MULTIPLE_PRIMARY_KEY),                            // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N03", INVALID_SYNTAX_PRIMARY_KEY_NOT_FOUND_IN_PROPS),                  // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N04", INVALID_SYNTAX_SRC_TYPE_OF_EDGE_NOT_SPECIFIED),                  // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N05", INVALID_SYNTAX_DST_TYPE_OF_EDGE_NOT_SPECIFIED),                  // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N06", INVALID_SYNTAX_UNKNOWN_ELEMENT_TYPE),                            // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N07", INVALID_SYNTAX_INDEX_TYPE_ALIAS_ILLEGAL),                        // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N08", INVALID_SYNTAX_DUPLICATE_PROPERTY),                              // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N09", INVALID_SYNTAX_NEST_QUERY_LAST_STATEMENT_ERROR),                 // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N10", INVALID_SYNTAX_NEST_QUERY_RESULT_STATEMENT_ERROR),               // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N11", INVALID_SYNTAX_NEST_QUERY_COLUMN_SIZE_ERROR),                    // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N12", INVALID_SYNTAX_NEST_QUERY_RETURN_AGG_ERROR),                     // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N13", INVALID_SYNTAX_NEST_QUERY_RETURN_LIMIT_ERROR),                   // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N14", INVALID_SYNTAX_VAR_TYPE_CONFLICT),                               // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N15", INVALID_SYNTAX_EQUI_JOIN_ON_CONDITIONAL_VAR),                    // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N16", INVALID_SYNTAX_EQUI_JOIN_ON_GROUP_VAR),                          // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N17", INVALID_SYNTAX_VAR_TYPE_ERROR),                                  // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N18", INVALID_SYNTAX_VAR_NOT_DEFINED),                                 // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N19", INVALID_SYNTAX_INSERT_BOUND_NODE),                               // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N20", INVALID_SYNTAX_VAR_INVALID_NODE_TYPE),                           // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N21", INVALID_SYNTAX_VAR_REFER_MULTIPLE_NODE_TYPE),                    // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N22", INVALID_SYNTAX_REDEFINED_VAR),                                   // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N23", INVALID_SYNTAX_CONFLICT_VAR_TYPE),                               // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N24", INVALID_SYNTAX_YIELD_ITEM_TYPE),                                 // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N25", INVALID_SYNTAX_MULTIPLE_NODE_INSERT),                            // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N26", INVALID_SYNTAX_DUPLICATED_PROPERTY_NAME),                        // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N27", INVALID_SYNTAX_DUPLICATED_INDEX_PROPERTY),                       // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N28", INVALID_SYNTAX_CONFLICT_PROPERTY_VALUE_TYPE),                    // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N29", INVALID_SYNTAX_ALTER_ELEMENT_MULTI_TIME),                        // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N30", INVALID_SYNTAX_ADD_PRIMARY_KEY_OR_MULTI_EDGE_KEY),               // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N31", INVALID_SYNTAX_ADD_INVALID_PROPERTY),                            // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N32", INVALID_SYNTAX_ELEMENT_TYPE_NAME_REDEFINE),                      // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N33", INVALID_SYNTAX_ILLEGAL_BYTE_STRING),                             // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N34", INVALID_SYNTAX_LABEL_EXPR_ELEMENT_TYPE_EXPR_COEXIST),            // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N35", INVALID_IDENTIFIER),                                             // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N36", INVALID_SYNTAX_FIELD_NUMBER_MISMATCH),                           // NOLINT
    DEFINE_ERRORCODE(SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION, "N37", INVALID_SYNTAX_FIELD_NOT_FOUND),                                 // NOLINT
    // X - dependent object error
    DEFINE_ERRORCODE(DEPENDENT_OBJECT_ERROR, "000", DEPENDENT_OBJECT_ERROR),
    DEFINE_ERRORCODE(DEPENDENT_OBJECT_ERROR, "001", EDGES_STILL_EXIST),
    DEFINE_ERRORCODE(DEPENDENT_OBJECT_ERROR, "002", ENDPOINT_NODE_IS_DELETED),
    DEFINE_ERRORCODE(DEPENDENT_OBJECT_ERROR, "003", ENDPOINT_NODE_NOT_IN_CURRENT_WORKING_GRAPH),                                     // NOLINT

    // X - graph type violation
    DEFINE_ERRORCODE(GRAPH_TYPE_VIOLATION, "000", GRAPH_TYPE_VIOLATION),

    // ↑ standard code
    // ↓ extended code

    // [ND-xxx] DATA_READ_WRITE_ERROR
    DEFINE_ERRORCODE(DATA_READ_WRITE_ERROR, "001", PART_NOT_FOUND),
    DEFINE_ERRORCODE(DATA_READ_WRITE_ERROR, "002", NODE_ALREADY_EXIST),
    DEFINE_ERRORCODE(DATA_READ_WRITE_ERROR, "003", EDGE_ALREADY_EXIST),
    DEFINE_ERRORCODE(DATA_READ_WRITE_ERROR, "004", PROPERTY_NOT_FOUND),
    DEFINE_ERRORCODE(DATA_READ_WRITE_ERROR, "005", LEADER_CHANGED),
    DEFINE_ERRORCODE(DATA_READ_WRITE_ERROR, "006", BINDING_TABLE_WRITE_FAILED),
    DEFINE_ERRORCODE(DATA_READ_WRITE_ERROR, "007", BINDING_TABLE_NO_SPACE),
    DEFINE_ERRORCODE(DATA_READ_WRITE_ERROR, "008", PROPERTY_NOT_NULLABLE),

    // [NK-xxx] KVSTORE
    DEFINE_ERRORCODE(KVSTORE_ERROR, "001", KVSTORE_BATCH_WRITE_FAILED),
    DEFINE_ERRORCODE(KVSTORE_ERROR, "002", KVSTORE_GET_PROPERTY_FAILED),
    DEFINE_ERRORCODE(KVSTORE_ERROR, "003", KVSTORE_SET_PROPERTY_FAILED),
    DEFINE_ERRORCODE(KVSTORE_ERROR, "004", KVSTORE_KEY_NOT_FOUND),
    DEFINE_ERRORCODE(KVSTORE_ERROR, "005", KVSTORE_COMMIT_FAILED),
    DEFINE_ERRORCODE(KVSTORE_ERROR, "006", KVSTORE_GET_FAILED),
    DEFINE_ERRORCODE(KVSTORE_ERROR, "007", KVSTORE_PUT_FAILED),
    DEFINE_ERRORCODE(KVSTORE_ERROR, "008", KVSTORE_REMOVE_FAILED),
    DEFINE_ERRORCODE(KVSTORE_ERROR, "009", KVSTORE_INGEST_FAILED),
    DEFINE_ERRORCODE(KVSTORE_ERROR, "010", KVSTORE_COMPACT_FAILED),
    DEFINE_ERRORCODE(KVSTORE_ERROR, "011", KVSTORE_FLUSH_FAILED),
    DEFINE_ERRORCODE(KVSTORE_ERROR, "012", KVSTORE_CHECKPOINT_FAILED),
    DEFINE_ERRORCODE(KVSTORE_ERROR, "013", KVSTORE_COLUMN_FAMILY_NOT_FOUND),
    DEFINE_ERRORCODE(KVSTORE_ERROR, "014", KVSTORE_OPEN_FAILED),
    DEFINE_ERRORCODE(KVSTORE_ERROR, "024", KVSTORE_OPTIONS_INVALID),
    DEFINE_ERRORCODE(KVSTORE_ERROR, "025", KVSTORE_LOCK_FAILED),
    DEFINE_ERRORCODE(KVSTORE_ERROR, "026", KVSTORE_EXPORT_TABLE_FAILED),
    DEFINE_ERRORCODE(KVSTORE_ERROR, "027", KVSTORE_OPEN_SST_FAILED),

    // [NC-xxx] CATALOG
    //      NOT FOUND
    DEFINE_ERRORCODE(CATALOG_ERROR, "001", CATALOG_DIRECTORY_NOT_FOUND),
    DEFINE_ERRORCODE(CATALOG_ERROR, "002", CATALOG_SCHEMA_NOT_FOUND),
    DEFINE_ERRORCODE(CATALOG_ERROR, "003", CATALOG_NODE_TYPE_NOT_FOUND),
    DEFINE_ERRORCODE(CATALOG_ERROR, "004", CATALOG_EDGE_TYPE_NOT_FOUND),
    DEFINE_ERRORCODE(CATALOG_ERROR, "005", CATALOG_PRIMARY_KEY_NOT_FOUND),
    DEFINE_ERRORCODE(CATALOG_ERROR, "006", CATALOG_PROPERTY_NOT_FOUND),
    DEFINE_ERRORCODE(CATALOG_ERROR, "007", CATALOG_INDEX_NOT_FOUND),
    DEFINE_ERRORCODE(CATALOG_ERROR, "008", CATALOG_PRIMARY_KEY_PROPERTY_NOT_FOUND),
    DEFINE_ERRORCODE(CATALOG_ERROR, "009", CATALOG_ELEMENT_TYPE_FOR_INSERT_NOT_FOUND),
    DEFINE_ERRORCODE(CATALOG_ERROR, "010", CATALOG_EPOCH_ERROR),
    DEFINE_ERRORCODE(CATALOG_ERROR, "011", CATALOG_LABEL_NOT_FOUND),


    //      ALREADY EXIST
    DEFINE_ERRORCODE(CATALOG_ERROR, "101", CATALOG_SCHEMA_ALREADY_EXISTS),
    DEFINE_ERRORCODE(CATALOG_ERROR, "102", CATALOG_EDGE_TYPE_ALREADY_EXIST),
    DEFINE_ERRORCODE(CATALOG_ERROR, "103", CATALOG_NODE_TYPE_ALREADY_EXIST),
    DEFINE_ERRORCODE(CATALOG_ERROR, "104", CATALOG_GRAPH_TYPE_ALREADY_EXIST),
    DEFINE_ERRORCODE(CATALOG_ERROR, "105", CATALOG_GRAPH_ALREADY_EXIST),
    DEFINE_ERRORCODE(CATALOG_ERROR, "106", CATALOG_PROPERTY_ALREADY_EXIST),
    DEFINE_ERRORCODE(CATALOG_ERROR, "107", CATALOG_NODE_INDEX_ALREADY_EXISTS),
    DEFINE_ERRORCODE(CATALOG_ERROR, "108", CATALOG_EDGE_INDEX_ALREADY_EXISTS),
    DEFINE_ERRORCODE(CATALOG_ERROR, "109", CATALOG_LABEL_ALREADY_EXIST),

    //      TYPE RELATED
    DEFINE_ERRORCODE(CATALOG_ERROR, "201", CATALOG_GRAPH_TYPE_MISMATCH),
    DEFINE_ERRORCODE(CATALOG_ERROR, "202", CATALOG_PRIMARY_KEY_NULLABLE),
    DEFINE_ERRORCODE(CATALOG_ERROR, "203", CATALOG_INDEX_PROPERTY_TYPE_NOT_SUPPORTED),
    DEFINE_ERRORCODE(CATALOG_ERROR, "204", CATALOG_PROPERTY_INVALID),
    DEFINE_ERRORCODE(CATALOG_ERROR, "205", CATALOG_NODE_TYPE_USED),
    DEFINE_ERRORCODE(CATALOG_ERROR, "205", CATALOG_INDEX_TYPE_NOT_SUPPORTED),

    //      OTHERS
    DEFINE_ERRORCODE(CATALOG_ERROR, "301", CATALOG_CANCEL_JOB_FAILED),
    DEFINE_ERRORCODE(CATALOG_ERROR, "302", CATALOG_DDL_MANAGER_STOPPED),
    DEFINE_ERRORCODE(CATALOG_ERROR, "303", CATALOG_STATE_PERMISSION_DENIED),
    DEFINE_ERRORCODE(CATALOG_ERROR, "304", CATALOG_VERSION_RETIRED),
    DEFINE_ERRORCODE(CATALOG_ERROR, "305", CATALOG_DDL_TIMEOUT),
    DEFINE_ERRORCODE(CATALOG_ERROR, "306", CATALOG_DDL_ILLEGAL),
    DEFINE_ERRORCODE(CATALOG_ERROR, "307", CATALOG_REORG_FAILED),
    DEFINE_ERRORCODE(CATALOG_ERROR, "308", CATALOG_MAXIMUM_PENDING_DDL_EXCEEDED),

    // [NN-xxx] RPC
    DEFINE_ERRORCODE(RPC_ERROR, "001", RPC_FAILED),
    DEFINE_ERRORCODE(RPC_ERROR, "002", RPC_REQUEST_INVALID),
    DEFINE_ERRORCODE(RPC_ERROR, "003", RPC_REQUEST_HANDLER_NOT_FOUND),
    DEFINE_ERRORCODE(RPC_ERROR, "004", RPC_RETRY_FAILED),
    DEFINE_ERRORCODE(RPC_ERROR, "005", RPC_DESERIALIZE_ERROR),
    DEFINE_ERRORCODE(RPC_ERROR, "006", RPC_DESERIALIZE_OBJECT_TYPE_ERROR),

    // [NI-xxx] PARAMETER
    //      META CLUSTER
    DEFINE_ERRORCODE(INVALID_PARAMETER, "001", META_CLUSTER_ALREADY_EXISTS),
    DEFINE_ERRORCODE(INVALID_PARAMETER, "002", META_CLUSTER_NOT_FOUND),
    //      META SERVICE
    DEFINE_ERRORCODE(INVALID_PARAMETER, "101", META_SERVICE_HOST_NOT_ADDED),
    DEFINE_ERRORCODE(INVALID_PARAMETER, "102", META_SERVICE_REPORT_NOT_MATCH_ADDED),
    DEFINE_ERRORCODE(INVALID_PARAMETER, "103", META_SERVICE_ALREADY_EXISTS),
    DEFINE_ERRORCODE(INVALID_PARAMETER, "104", META_HOST_ALREADY_EXISTS),
    DEFINE_ERRORCODE(INVALID_PARAMETER, "105", META_HOST_NOT_FOUND),
    DEFINE_ERRORCODE(INVALID_PARAMETER, "106", META_AGENT_ALREADY_EXISTS),
    //      META PARTITION
    DEFINE_ERRORCODE(INVALID_PARAMETER, "201", META_PART_CONFIG_INVALID),
    //      STORAGE
    DEFINE_ERRORCODE(INVALID_PARAMETER, "301", STORAGE_EXECUTOR_PARAMETER_INVALID),
    DEFINE_ERRORCODE(INVALID_PARAMETER, "302", STORAGE_EXECUTOR_PARAMETER_TYPE_INVALID),
    DEFINE_ERRORCODE(INVALID_PARAMETER, "303", STORAGE_EXECUTOR_PARAMETER_PRIMARY_KEY_INVALID),
    //      CONFIGURATION
    DEFINE_ERRORCODE(INVALID_PARAMETER, "401", CONFIGURATION_INVALID),
    DEFINE_ERRORCODE(INVALID_PARAMETER, "402", CONFIGURATION_ITEM_NOT_FOUND),
    DEFINE_ERRORCODE(INVALID_PARAMETER, "403", CONFIGURATION_ITEM_TYPE_INVALID),
    DEFINE_ERRORCODE(INVALID_PARAMETER, "404", CONFIGURATION_ITEM_RANGE_INVALID),
    DEFINE_ERRORCODE(INVALID_PARAMETER, "405", CONFIGURATION_INFO_FILE_FORMAT_ILLEGAL),
    DEFINE_ERRORCODE(INVALID_PARAMETER, "406", CONFIGURATION_INVALID_CONFIG_KEY),
    DEFINE_ERRORCODE(INVALID_PARAMETER, "407", CONFIGURATION_INVALID_AUDIT_CATEGORY),
    DEFINE_ERRORCODE(INVALID_PARAMETER, "408", CONFIGURATION_MISSING_CONFIG_KEY),
    DEFINE_ERRORCODE(INVALID_PARAMETER, "409", CONFIGURATION_ILLEGAL_FORMAT),

    // [NJ-xxx] JOB
    DEFINE_ERRORCODE(JOB_ERROR, "001", JOB_DESCRIPTION_INVALID),

    // [NG-xxx] GRAPH COMPUTE
    DEFINE_ERRORCODE(GRAPH_COMPUTE_ERROR, "000", GRAPH_COMPUTE_ERROR),

    // [NP-xxx] PLUGIN
    //      PLUGIN
    DEFINE_ERRORCODE(PLUGIN_ERROR, "000", PLUGIN_ERROR),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "001", PLUGIN_INVALID_TYPE),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "002", PLUGIN_MULTIPLE_PLUGIN),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "003", PLUGIN_CONFIG_NOT_FOUND),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "004", PLUGIN_CONFIG_PARSE_ERROR),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "005", PLUGIN_INIT_ERROR),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "006", PLUGIN_DESTROY_ERROR),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "007", PLUGIN_UNSUPPORT_AUTH_TYPE),
    //      PROCEDURE
    DEFINE_ERRORCODE(PLUGIN_ERROR, "101", PROCEDURE_ERROR),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "102", PROCEDURE_INVALID_ARGUMENT),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "103", PROCEDURE_NOT_FOUND),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "104", PROCEDURE_NO_OUTPUT),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "105", PROCEDURE_NUM_ARGS_NOT_ENOUGH),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "106", PROCEDURE_NUM_ARGS_EXCEEDED),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "107", PROCEDURE_INVALID_ARGUMENT_TYPE),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "108", PROCEDURE_INVALID_ARGUMENT_ENCODE),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "109", PROCEDURE_YIELD_COLUMN_ERROR),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "110", PROCEDURE_UNKNOWN_YIELD_COLUMN),
    //      UDF
    DEFINE_ERRORCODE(PLUGIN_ERROR, "201", UDF_ERROR),
    //      MODULE
    DEFINE_ERRORCODE(PLUGIN_ERROR, "301", MODULE_ERROR),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "302", MODULE_ALREADY_LOADED),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "303", MODULE_NOT_FOUND),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "304", MODULE_BEING_USED),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "305", MODULE_INVALID_PROC_NAME),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "306", MODULE_INVALID_FUNC_NAME),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "307", MODULE_INVALID_PLUGIN_NAME),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "308", MODULE_INVALID_PLUGIN_API_VERSION),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "309", MODULE_INVALID_NULL_PLUGIN),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "310", MODULE_DLOPEN_ERROR),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "312", MODULE_CANNOT_UNLOAD),
    DEFINE_ERRORCODE(PLUGIN_ERROR, "313", MODULE_INVALID_REGISTER),

    //  [NH-xxx] Authenticate
    //  authenticate user & password error
    DEFINE_ERRORCODE(AUTHENTICATE_ERROR, "001", AUTH_INVALID_PASSWORD),
    DEFINE_ERRORCODE(AUTHENTICATE_ERROR, "002", AUTH_USER_EXIST),
    DEFINE_ERRORCODE(AUTHENTICATE_ERROR, "003", AUTH_USER_NOT_EXIST),
    DEFINE_ERRORCODE(AUTHENTICATE_ERROR, "004", AUTH_USER_DISABLED),
    DEFINE_ERRORCODE(AUTHENTICATE_ERROR, "005", AUTH_USER_LOCKED),
    DEFINE_ERRORCODE(AUTHENTICATE_ERROR, "006", AUTH_INVALID_USERNAME),
    DEFINE_ERRORCODE(AUTHENTICATE_ERROR, "007", AUTH_INVALID_USERNAME_OR_PASSWORD),
    DEFINE_ERRORCODE(AUTHENTICATE_ERROR, "008", AUTH_CANNOT_DISABLE_SYSTEM_USER),
    DEFINE_ERRORCODE(AUTHENTICATE_ERROR, "009", AUTH_NEED_CHANGE_PASSWORD),
    // authenticate information error
    DEFINE_ERRORCODE(AUTHENTICATE_ERROR, "101", AUTH_INVALID_AUTH_INFO),
    // authenticate token error
    DEFINE_ERRORCODE(AUTHENTICATE_ERROR, "201", AUTH_INVALID_TOKEN),
    DEFINE_ERRORCODE(AUTHENTICATE_ERROR, "301", AUTH_INIT_ERROR),

    // [NB-xxx] Authorization
    DEFINE_ERRORCODE(AUTHORIZE_ERROR, "000", AUTHORIZE_ERROR),
    DEFINE_ERRORCODE(AUTHORIZE_ERROR, "001", AUTHORIZE_INVALID_ROLENAME),
    DEFINE_ERRORCODE(AUTHORIZE_ERROR, "002", AUTHORIZE_INVALID_OBJECT),
    DEFINE_ERRORCODE(AUTHORIZE_ERROR, "003", AUTHORIZE_ROLE_EXIST),
    DEFINE_ERRORCODE(AUTHORIZE_ERROR, "004", AUTHORIZE_ROLE_NOT_EXIST),
    DEFINE_ERRORCODE(AUTHORIZE_ERROR, "005", AUTHORIZE_USER_NOT_EXIST),
    DEFINE_ERRORCODE(AUTHORIZE_ERROR, "006", AUTHORIZE_USER_EXIST),
    DEFINE_ERRORCODE(AUTHORIZE_ERROR, "101", AUTHORIZE_INSUFFICIENT_PRIVILEGE),
    DEFINE_ERRORCODE(AUTHORIZE_ERROR, "102", AUTHORIZE_CONSTRAINT),

    // [NE-xxx] SESSION
    DEFINE_ERRORCODE(SESSION_ERROR, "000", SESSION_ERROR),
    DEFINE_ERRORCODE(SESSION_ERROR, "001", CREATE_SESSION_FAILED),
    DEFINE_ERRORCODE(SESSION_ERROR, "002", UNSUPPORTED_PROTOCOL_VERSION),
    DEFINE_ERRORCODE(SESSION_ERROR, "003", SESSION_SET_ERROR),

    // [NM-xxx] META
    DEFINE_ERRORCODE(METADATA_ERROR, "001", META_NOT_SUPPORTED),
    DEFINE_ERRORCODE(METADATA_ERROR, "002", META_NOT_INIT),
    DEFINE_ERRORCODE(METADATA_ERROR, "003", META_RESP_NOT_SET),
    DEFINE_ERRORCODE(METADATA_ERROR, "004", META_GET_KV_FAILED),
    DEFINE_ERRORCODE(METADATA_ERROR, "005", META_WRITE_KV_FAILED),
    DEFINE_ERRORCODE(METADATA_ERROR, "006", META_SERVICE_NOT_FOUND),
    DEFINE_ERRORCODE(METADATA_ERROR, "007", META_PART_ALREADY_EXIST),
    DEFINE_ERRORCODE(METADATA_ERROR, "008", META_PART_NOT_FOUND),
    DEFINE_ERRORCODE(METADATA_ERROR, "009", META_LOCATION_ALREADY_EXIST),
    DEFINE_ERRORCODE(METADATA_ERROR, "010", META_LOCATION_NOT_FOUND),
    DEFINE_ERRORCODE(METADATA_ERROR, "011", META_NOT_ENOUGH_LOCATION),
    DEFINE_ERRORCODE(METADATA_ERROR, "012", META_PART_NUM_INVALID),
    DEFINE_ERRORCODE(METADATA_ERROR, "013", META_PART_NO_ACTIVE_SERVICE),
    DEFINE_ERRORCODE(METADATA_ERROR, "014", META_SERVICE_ID_ERROR),
    DEFINE_ERRORCODE(METADATA_ERROR, "015", META_REPORT_ADDRESS_ERROR),
    DEFINE_ERRORCODE(METADATA_ERROR, "016", META_GET_KV_PREFIX_FAILED),
    DEFINE_ERRORCODE(METADATA_ERROR, "017", META_FAILED_CHECK_SERVICE),
    DEFINE_ERRORCODE(METADATA_ERROR, "018", META_FAILED_CHECK_SERVICE_EXIST),
    DEFINE_ERRORCODE(METADATA_ERROR, "019", META_SERVICE_STATIC_PORT_ALREADY_EXISTS),
    DEFINE_ERRORCODE(METADATA_ERROR, "020", META_SERVICE_DYNAMIC_PORT_ALREADY_EXISTS),
    DEFINE_ERRORCODE(METADATA_ERROR, "021", META_FAILED_ADD_SERVICE),
    DEFINE_ERRORCODE(METADATA_ERROR, "022", META_PUT_SERVICE_ADDRESS_FAILED),
    DEFINE_ERRORCODE(METADATA_ERROR, "023", META_LIST_SERVICE_FAILED),
    DEFINE_ERRORCODE(METADATA_ERROR, "024", META_FETCH_SERVICE_KEY_FAILED),
    DEFINE_ERRORCODE(METADATA_ERROR, "025", META_SERVICE_NOT_ADDED),
    DEFINE_ERRORCODE(METADATA_ERROR, "026", META_SERVICE_IN_USE),
    DEFINE_ERRORCODE(METADATA_ERROR, "027", META_SERVICE_NOT_IN_CLUSTER),
    DEFINE_ERRORCODE(METADATA_ERROR, "028", META_PURGE_SERVICE_INFO_FAILED),
    DEFINE_ERRORCODE(METADATA_ERROR, "029", META_PART_LEADER_NOT_ENOUGH),
    DEFINE_ERRORCODE(METADATA_ERROR, "030", META_PART_NOT_ENOUGH),
    DEFINE_ERRORCODE(METADATA_ERROR, "031", META_ACTIVE_SERVICE_NOT_ENOUGH),
    DEFINE_ERRORCODE(METADATA_ERROR, "032", META_CANNOT_FIND_SERVICE),
    DEFINE_ERRORCODE(METADATA_ERROR, "033", META_BALANCE_PART_RUNNING),
    DEFINE_ERRORCODE(METADATA_ERROR, "034", META_BALANCE_LEADER_RUNNING),
    DEFINE_ERRORCODE(METADATA_ERROR, "035", META_INSUFFICIENT_SERVICE),
    DEFINE_ERRORCODE(METADATA_ERROR, "036", META_NO_PART),
    DEFINE_ERRORCODE(METADATA_ERROR, "037", GET_META_CLIENT_FAILED),
    DEFINE_ERRORCODE(METADATA_ERROR, "038", META_UNSUPPORTED_SERVICE),
    DEFINE_ERRORCODE(METADATA_ERROR, "039", META_SERVICE_FAIL_TO_ALLOC_ID),
    DEFINE_ERRORCODE(METADATA_ERROR, "040", META_DROP_CLUSTER_IS_NOT_EMPTY),

    // [NO-xxx] STORAGE
    //      CODEC
    DEFINE_ERRORCODE(STORAGE_ERROR, "001", STORAGE_CODEC_PROPERTY_NOT_NULLABLE),
    DEFINE_ERRORCODE(STORAGE_ERROR, "002", STORAGE_CODEC_PROPERTY_NOT_SET),
    DEFINE_ERRORCODE(STORAGE_ERROR, "003", STORAGE_CODEC_PROPERTY_NOT_FOUND),
    DEFINE_ERRORCODE(STORAGE_ERROR, "004", STORAGE_CODEC_PROPERTY_TYPE_NOT_MATCH),
    DEFINE_ERRORCODE(STORAGE_ERROR, "005", STORAGE_CODEC_PROPERTY_OUT_OF_RANGE),
    DEFINE_ERRORCODE(STORAGE_ERROR, "006", STORAGE_CODEC_PROPERTY_UNABLE_TO_ENCODE),
    DEFINE_ERRORCODE(STORAGE_ERROR, "007", STORAGE_CODEC_INDEX_ILLEGAL),
    DEFINE_ERRORCODE(STORAGE_ERROR, "008", STORAGE_CODEC_INDEX_PROPERTIES_ILLEGAL),
    DEFINE_ERRORCODE(STORAGE_ERROR, "009", STORAGE_CODEC_INDEX_PROPERTY_NOT_REQUIRED),
    DEFINE_ERRORCODE(STORAGE_ERROR, "010", STORAGE_CODEC_DECODE_FAILED),
    DEFINE_ERRORCODE(STORAGE_ERROR, "011", STORAGE_CODEC_PROPERTY_LIST_NEST_TYPE_NOT_FOUND),
    DEFINE_ERRORCODE(STORAGE_ERROR, "012", STORAGE_CODEC_INDEX_CORRUPTION_NO_TERMINATOR),
    DEFINE_ERRORCODE(STORAGE_ERROR, "013", STORAGE_CODEC_INDEX_PROPERTIES_ILLEGAL_PROPERTY_NOT_EXIST),                        // NOLINT
    DEFINE_ERRORCODE(STORAGE_ERROR, "014", STORAGE_CODEC_INDEX_ILLEGAL_NOT_RESERVED_PROPERTY),
    DEFINE_ERRORCODE(STORAGE_ERROR, "015", STORAGE_CODEC_WRITE_VECTOR_FAILED),
    //      PART
    DEFINE_ERRORCODE(STORAGE_ERROR, "101", GET_ALL_PART_FAILED),
    DEFINE_ERRORCODE(STORAGE_ERROR, "102", GET_PART_ROUTER_FAILED),
    DEFINE_ERRORCODE(STORAGE_ERROR, "103", GET_ALL_LEADER_FAILED),

    // [NA-xxx] RAFT
    DEFINE_ERRORCODE(RAFT_ERROR, "001", RAFT_INVALID_PEER),
    DEFINE_ERRORCODE(RAFT_ERROR, "002", RAFT_RPC_EXCEPTION),
    DEFINE_ERRORCODE(RAFT_ERROR, "003", RAFT_TIMEOUT),
    DEFINE_ERRORCODE(RAFT_ERROR, "004", RAFT_CATCHUP),
    DEFINE_ERRORCODE(RAFT_ERROR, "005", RAFT_LEADER_REMOVED),
    DEFINE_ERRORCODE(RAFT_ERROR, "006", RAFT_SET_PEER),
    DEFINE_ERRORCODE(RAFT_ERROR, "007", RAFT_NODE_STOP),
    DEFINE_ERRORCODE(RAFT_ERROR, "008", RAFT_HIGHER_TERM_REQUEST),
    DEFINE_ERRORCODE(RAFT_ERROR, "009", RAFT_HIGHER_TERM_RESPONSE),
    DEFINE_ERRORCODE(RAFT_ERROR, "010", RAFT_BAD_NODE),
    DEFINE_ERRORCODE(RAFT_ERROR, "011", RAFT_VOTE_FOR_CANDIDATE),
    DEFINE_ERRORCODE(RAFT_ERROR, "012", RAFT_NEW_LEADER),
    DEFINE_ERRORCODE(RAFT_ERROR, "013", RAFT_LEADER_CONFLICT),
    DEFINE_ERRORCODE(RAFT_ERROR, "014", RAFT_TRANSFER_LEADER),
    DEFINE_ERRORCODE(RAFT_ERROR, "015", RAFT_STOP),
    DEFINE_ERRORCODE(RAFT_ERROR, "016", RAFT_BUSY),
    DEFINE_ERRORCODE(RAFT_ERROR, "017", RAFT_INVALID),
    DEFINE_ERRORCODE(RAFT_ERROR, "018", RAFT_FAILED),

    // EXPR (evaluation failed is a subclass of data exception)
    DEFINE_ERRORCODE(DATA_EXCEPTION, "N02", EXPR_EVAL_FAILED),

    // [NR-xxx] RUNTIME
    DEFINE_ERRORCODE(RUNTIME_ERROR, "000", RUNTIME_ERROR),
    // [NR-0xx] Expression & Function
    DEFINE_ERRORCODE(RUNTIME_ERROR, "001", EXPR_ERROR),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "002", UNDEFINED_FUNCTION),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "003", INVALID_FUNCTION_ARGUMENT),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "004", INVALID_LOGICAL_EXPRESSION),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "005", EXPR_COMPILE_FAILED),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "006", RESOLVE_FUNCTION_FAILED),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "007", EXPR_TYPE_INFER_FAILED),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "008", INVALID_CAST_EXPR),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "009", INVALID_CONST_EXPR),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "010", INVALID_CONSTRUCT_PATH_EXPR_INPUT),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "011", INVALID_CASE_EXPR_WHEN_INPUT),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "012", INVALID_EXPRESSION_TYPE),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "013", INVALID_CONSTRUCT_LIST_EXPR_INPUT),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "014", INVALID_CASE_EXPR_THEN_INPUT),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "015", INVALID_CONSTRUCT_RECORD_EXPR_INPUT),

    // [NR-1xx] DDL
    DEFINE_ERRORCODE(RUNTIME_ERROR, "100", DDL_FAILED),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "104", DROP_REFERENCED_GRAPH_TYPE),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "108", CATALOG_MIRROR_GRAPH_ALREADY_EXIST),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "109", CATALOG_MIRROR_GRAPH_NOT_FOUND),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "110", CATALOG_GRAPH_ALREADY_HAVE_MIRROR_GRAPH),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "111", CATALOG_GRAPH_DO_NOT_HAVE_MIRROR_GRAPH),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "112", CATALOG_MIRROR_GRAPH_NAME_CONFLICT),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "113", CATALOG_MIRROR_GRAPH_BASE_GRAPH_EMPTY),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "114", DISCRIMINATOR_NOT_FOUND_IN_PROPS),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "117", INVALID_SCHEMA_PATH),

    // [NR-2xx] DML
    //      INSERT
    DEFINE_ERRORCODE(RUNTIME_ERROR, "202", GET_NODE_ID_FAILED),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "204", SRC_NODE_NOT_EXISTED),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "205", DST_NODE_NOT_EXISTED),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "206", DML_NUM_OF_PROPERTY_NOT_MATCH),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "208", PRIMARY_KEY_CONSTRAINT_VIOLATION),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "209", EDGE_RANK_CONSTRAINT_VIOLATION),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "210", NODE_IS_MISSING),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "211", GET_NODE_ID_FROM_PRIMARY_KEY_FAILED),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "212", INSERT_INFER_MORE_THAN_ONE_TYPE),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "213", ENDPOINT_NODE_TYPES_MISMATCH),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "214", INSERT_PROPERTY_NOT_FOUND),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "215", NOT_IN_CURRENT_GRAPH),
    //      SET
    DEFINE_ERRORCODE(RUNTIME_ERROR, "232", SET_INVALID_TYPE),
    //      DELETE
    DEFINE_ERRORCODE(RUNTIME_ERROR, "253", INVALID_DELETE_TYPE),
    //      REMOVE
    // TODO (yuxuan.wang) Add remove error code
    // [NR-3xx] DQL
    DEFINE_ERRORCODE(RUNTIME_ERROR, "301", MEMORY_EXCEEDED),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "302", QUERY_CANCELED),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "303", BAD_PLAN_NODE_TYPE),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "304", SPLIT_PLAN_TO_STORAGE_FAILED),
    // [NR-4xx] DCL
    DEFINE_ERRORCODE(RUNTIME_ERROR, "401", KILL_QUERY_FAILED),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "402", KILL_SESSION_FAILED),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "403", QUERY_ID_NOT_FOUND),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "404", MAX_EXECUTION_TIME_EXCEEDED),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "405", SESSION_NOT_FOUND),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "406", SESSION_IS_BUSY),

    DEFINE_ERRORCODE(RUNTIME_ERROR, "407", CREATE_ROLE_FAILED),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "408", ALTER_ROLE_FAILED),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "409", DROP_ROLE_FAILED),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "410", ALTER_OWNER_FAILED),

    DEFINE_ERRORCODE(RUNTIME_ERROR, "411", GRANT_ROLE_FAILED),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "412", REVOKE_ROLE_FAILED),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "413", GRANT_PRIVILEGE_FAILED),
    DEFINE_ERRORCODE(RUNTIME_ERROR, "414", REVOKE_PRIVILEGE_FAILED),

    // [NS-xxx] SEMANTIC
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "000", SEMANTIC_ERROR),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "001", UNDEFINED_VARIABLE),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "002", DUPLICATE_DEFINE_VARIABLE),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "003", UNDEFINED_PARAMETER),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "004", SEMANTIC_LINEAR_QUERY_COLUMN_SIZE_MISMATCH),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "005", SEMANTIC_FILTER_CLAUSE_MUST_BE_BOOL_TYPE),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "006", SEMANTIC_INVALID_EXPRESSION_TYPE),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "007", SEMANTIC_LINEAR_QUERY_COLUMN_NAME_MISMATCH),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "008", SEMANTIC_INCONSISTENT_VARIABLE_DEFINITION),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "009", SEMANTIC_GROUP_VARIABLE_REDEFINITION),

    DEFINE_ERRORCODE(SEMANTIC_ERROR, "101", SEMANTIC_NODE_PRIMARY_KEY_PROPERTY_NUM_MISMATCH),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "102", SEMANTIC_NODE_PRIMARY_KEY_PROPERTY_NOT_FOUND),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "103", SEMANTIC_GRAPH_PATTERN_QUANTIFIER_EXCEED_LOW_BOUND),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "104", SEMANTIC_GRAPH_PATTERN_QUANTIFIER_LOW_BOUND_EXCEED_UP_BOUND),                  // NOLINT
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "105", SEMANTIC_INVALID_EDGE_PATTERN),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "106", SEMANTIC_RETURN_ALL_WITH_GROUPBY),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "107", SEMANTIC_RETURN_ALL_WITH_NO_VARS_IN_SCOPE),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "108", SEMANTIC_RETURN_ALL_WITH_EMPTY_GROUPBY),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "109", SEMANTIC_RETURN_DUPLICATE_COLUMN),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "110", SEMANTIC_INVALID_EDGE_PREDICATE),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "111", PATTERN_NOT_SUPPORTED),

    DEFINE_ERRORCODE(SEMANTIC_ERROR, "201", SEMANTIC_EMPTY_GROUPBY_MISMATCH),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "202", SEMANTIC_NO_AGG_FOUND_WITH_GROUPBY),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "203", SEMANTIC_GROUPBY_NO_BINDING),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "204", SEMANTIC_GROUPBY_CONTAIN_AGG_EXPR),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "205", SEMANTIC_GROUPBY_MISMATCH),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "206", SEMANTIC_IMPLICIT_AGG_IN_RETURN),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "207", SEMANTIC_VAR_PROP_SETITEM_ERROR),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "208", SEMANTIC_ASSIGN_EXPR_TYPE_ERROR),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "209", SEMANTIC_CURRENT_WORKING_GRAPH_NOT_FOUND),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "210", INVALID_LABEL_EXPR_INPUT),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "211", INVALID_TYPE_EXPR_INPUT),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "212", INVALID_OFFSET_EXPR_TYPE),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "213", INVALID_LIMIT_EXPR_TYPE),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "214", INVALID_NUM_OF_PATHS_EXPR_TYPE),
    DEFINE_ERRORCODE(SEMANTIC_ERROR, "215", INVALID_NUM_OF_GROUPS_EXPR_TYPE),

    // OPTIMIZER [NZ-xxx]
    DEFINE_ERRORCODE(OPTIMIZER_ERROR, "001", PLAN_GENERATE_FAILED),

    // UNSUPPORTED [NT-xxx]
    DEFINE_ERRORCODE(UNSUPPORTED, "000", UNSUPPORTED),
    //      DDL
    DEFINE_ERRORCODE(UNSUPPORTED, "001", UNSUPPORTED_INDEX_PROPERTY_TYPE),
    DEFINE_ERRORCODE(UNSUPPORTED, "002", UNSUPPORTED_NODE_TYPE_WITHOUT_PRIMARY_KEY),
    DEFINE_ERRORCODE(UNSUPPORTED, "003", UNSUPPORTED_GRAPH_TYPE_EXPR),
    DEFINE_ERRORCODE(UNSUPPORTED, "004", UNSUPPORTED_GRAPH_TYPE_INITIALIZER),
    DEFINE_ERRORCODE(UNSUPPORTED, "005", UNSUPPORTED_EDGE_DIRECTION),
    //      DML
    DEFINE_ERRORCODE(UNSUPPORTED, "101", UNSUPPORTED_INSERT_EDGE_STATEMENT),
    DEFINE_ERRORCODE(UNSUPPORTED, "102", UNSUPPORTED_INSERT_NODE_STATEMENT),
    DEFINE_ERRORCODE(UNSUPPORTED, "103", UNSUPPORTED_DATE_MODIFY_STATEMENT),
    DEFINE_ERRORCODE(UNSUPPORTED, "104", UNSUPPORTED_MULTIPLE_PATH_PATTERN),
    DEFINE_ERRORCODE(UNSUPPORTED, "105", UNSUPPORTED_UPDATE_PRIMARY_KEY),
    DEFINE_ERRORCODE(UNSUPPORTED, "106", UNSUPPORTED_SET_MULTIPLE_NODE_TYPE),
    DEFINE_ERRORCODE(UNSUPPORTED, "107", UNSUPPORTED_SET_ALL_SET_LABEL),
    DEFINE_ERRORCODE(UNSUPPORTED, "108", UNSUPPORTED_UPDATE_MULTIEDGE_KEY),
    //      EXPRESSION & FUNC
    DEFINE_ERRORCODE(UNSUPPORTED, "201", UNSUPPORTED_AGGREGATION_EXPRESSION),
    DEFINE_ERRORCODE(UNSUPPORTED, "202", UNSUPPORTED_AGGREGATION_EXPRESSION_NESTED),
    DEFINE_ERRORCODE(UNSUPPORTED, "203", AGGREGATION_EXPRESSION_NOT_ALLOWED),
    DEFINE_ERRORCODE(UNSUPPORTED, "204", UNDEFINED_AGG_FUNCTION),
    DEFINE_ERRORCODE(UNSUPPORTED, "205", UNSUPPORTED_TRIM_NON_ASCII_CHAR),
    DEFINE_ERRORCODE(UNSUPPORTED, "206", UNSUPPORTED_TYPE_GET_PROP),
    //      DQL
    DEFINE_ERRORCODE(UNSUPPORTED, "301", UNSUPPORTED_PATH_FACTOR),
    //      OTHER
    DEFINE_ERRORCODE(UNSUPPORTED, "401", UNSUPPORTED_CHARSET),
    DEFINE_ERRORCODE(UNSUPPORTED, "402", UNSUPPORTED_COLLATION),
    DEFINE_ERRORCODE(UNSUPPORTED, "403", UNSUPPORTED_CHARSET_COLLATION_NOT_MATCH),

    // SYSTEM [NY-xxx]
    DEFINE_ERRORCODE(SYSTEM_ERROR, "000", SYSTEM_ERROR),
    //      DATABASE
    DEFINE_ERRORCODE(SYSTEM_ERROR, "001", NO_VALIDATOR),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "002", STATS_ERROR),
    //      FILE
    DEFINE_ERRORCODE(SYSTEM_ERROR, "101", FILE_ERROR),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "102", FILE_NOT_FOUND),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "103", FILE_IS_EMPTY),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "104", FILE_READ_PERMISSION),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "105", FILE_READ_LINK),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "106", FILE_READ_PATH),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "107", FILE_OPEN_DIR),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "108", FILE_OPEN_FILE),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "109", FILE_TYPE_NOT_SUPPORT),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "110", FILE_FILE_STATE),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "111", FILE_CREATE_DIR_FAILED),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "112", FILE_READ_SERVICE_ID_FILE_ERROR),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "113", FILE_PARSE_SERVICE_ID_FILE_ERROR),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "114", FILE_SAVE_SERVICE_ID_FILE_ERROR),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "115", FILE_REMOVE_DIR_FAILED),
    //      MEMORY
    DEFINE_ERRORCODE(SYSTEM_ERROR, "201", MEMORY_ERROR),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "202", MEMORY_CONFIG_ERROR),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "203", MEMORY_BACKGROUND_CHECK),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "204", MEMORY_SYSTEM_INFO),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "205", MEMORY_VECTOR_INVALID_SIZE),
    //      NETWORK
    DEFINE_ERRORCODE(SYSTEM_ERROR, "301", NETWORK_ERROR),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "302", NETWORK_CREATE_SOCKET),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "303", NETWORK_UNKNOWN_ADDR),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "304", NETWORK_BIND_FAILED),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "305", NETWORK_LISTEN_FAILED),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "306", NETWORK_NBIO_STOPPED),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "307", NETWORK_CONN_CLOSED),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "308", NETWORK_PROTOCAL),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "309", NETWORK_TIMEOUT),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "310", NETWORK_DISCONNECTED),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "311", NETWORK_ADDR_NOT_FOUND),
    DEFINE_ERRORCODE(SYSTEM_ERROR, "312", NETWORK_INVALID_HOST),
    // LICENSE ERROR [NL-xxx]
    //      ENCRYPTION
    DEFINE_ERRORCODE(LICENSE_ERROR, "001", LICENSE_ENCRYPTION_ERROR),
    //      LICENSE MANAGER
    DEFINE_ERRORCODE(LICENSE_ERROR, "101", LICENSE_MANAGER_ERROR),
    // JOB
    DEFINE_ERRORCODE(JOB_ERROR, "000", JOB_ERROR),
    DEFINE_ERRORCODE(JOB_ERROR, "001", JOB_TYPE_UNKNOWN),
    DEFINE_ERRORCODE(JOB_ERROR, "002", JOB_NOT_FOUND),
    DEFINE_ERRORCODE(JOB_ERROR, "003", JOB_TASK_NOT_FOUND),
    DEFINE_ERRORCODE(JOB_ERROR, "004", JOB_CAN_NOT_RUN),

    // TASK
    DEFINE_ERRORCODE(JOB_ERROR, "011", TASK_NOT_FOUND_IN_STORAGE),
    DEFINE_ERRORCODE(JOB_ERROR, "012", TASK_STOPPED),

    // BACKUP
    DEFINE_ERRORCODE(BACKUP_ERROR, "000", BACKUP_ERROR),
    DEFINE_ERRORCODE(BACKUP_ERROR, "001", BACKUP_RECORD_EXISTS),
    DEFINE_ERRORCODE(BACKUP_ERROR, "002", BACKUP_RUNNING_JOBS),
    DEFINE_ERRORCODE(BACKUP_ERROR, "003", BACKUP_META_TABLE_EMPTY),
    DEFINE_ERRORCODE(BACKUP_ERROR, "004", BACKUP_LOST_PART),
    DEFINE_ERRORCODE(BACKUP_ERROR, "005", BACKUP_DUPLICATE_PART),
    DEFINE_ERRORCODE(BACKUP_ERROR, "006", BACKUP_RESTORE_INVALID_REQEUST),
    DEFINE_ERRORCODE(BACKUP_ERROR, "007", BACKUP_REMAP_PART_FAILED),
    DEFINE_ERRORCODE(BACKUP_ERROR, "008", BACKUP_RESTORE_TABLE_FAILED),
    DEFINE_ERRORCODE(BACKUP_ERROR, "009", BACKUP_DROP_NAME_EMPTY),
    DEFINE_ERRORCODE(BACKUP_ERROR, "010", BACKUP_DROP_NAME_NOT_EXIST),

    // UNKNOWN
    DEFINE_ERRORCODE(UNKNOWN, "000", UNKNOWN),
};

// clang-format on

class ErrorCodeUtils final {
public:
    static bool ok(const std::string& e) {
        return e == format(ErrorCode::SUCCESSFUL_COMPLETION);
    }

    static std::string format(ErrorCode codeStr) {
        return {reinterpret_cast<const char*>(&codeStr), CODE_BYTES};
    }

    static ErrorCode parseFrom(const std::string& codeStr) {
        return static_cast<ErrorCode>(
                CODE(CLASS(codeStr.data()), SUBCLASS(codeStr.data() + CODE_CLASS_BYTES)));
    }

    static bool isInternalError(ErrorCode ec) {
        return getCategory(ec) == ErrorCategory::T;
    }

    static ErrorCategory getCategory(ErrorCode ec) {
        auto errorClass = static_cast<ErrorClass>(CLASS(reinterpret_cast<const char*>(&ec)));
        switch (errorClass) {
            case ErrorClass::SUCCESSFUL_COMPLETION:
                return ErrorCategory::S;
            case ErrorClass::WARNING:
                return ErrorCategory::W;
            case ErrorClass::NO_DATA:
                return ErrorCategory::N;
            case ErrorClass::INFORMATIONAL:
                return ErrorCategory::I;
            case ErrorClass::CONNECTION_EXCEPTION:
            case ErrorClass::DATA_EXCEPTION:
            case ErrorClass::INVALID_TRANSACTION_STATE:
            case ErrorClass::INVALID_TRANSACTION_TERMINATION:
            case ErrorClass::TRANSACTION_ROLLBACK:
            case ErrorClass::SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION:
            case ErrorClass::DEPENDENT_OBJECT_ERROR:
            case ErrorClass::GRAPH_TYPE_VIOLATION:
            case ErrorClass::RUNTIME_ERROR:
            case ErrorClass::SEMANTIC_ERROR:
            case ErrorClass::STORAGE_ERROR:
            case ErrorClass::CATALOG_ERROR:
            case ErrorClass::DATA_READ_WRITE_ERROR:
            case ErrorClass::INVALID_PARAMETER:
            case ErrorClass::GRAPH_COMPUTE_ERROR:
            case ErrorClass::PLUGIN_ERROR:
            case ErrorClass::SESSION_ERROR:
            case ErrorClass::OPTIMIZER_ERROR:
            case ErrorClass::AUTHENTICATE_ERROR:
            case ErrorClass::AUTHORIZE_ERROR:
            case ErrorClass::UNSUPPORTED:
                return ErrorCategory::X;
            case ErrorClass::METADATA_ERROR:
            case ErrorClass::RPC_ERROR:
            case ErrorClass::KVSTORE_ERROR:
            case ErrorClass::RAFT_ERROR:
            case ErrorClass::SYSTEM_ERROR:
            case ErrorClass::JOB_ERROR:
                return ErrorCategory::T;
            case ErrorClass::UNKNOWN:
            default:
                return ErrorCategory::U;
        }
    }
};

inline std::ostream& operator<<(std::ostream& os, const ErrorCode& ec) {
    os << ErrorCodeUtils::format(ec);
    return os;
}

}  // namespace nebula
